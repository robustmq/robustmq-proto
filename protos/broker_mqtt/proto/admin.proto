/*
 * Copyright 2023 RobustMQ Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package broker.mqtt.admin;
service MQTTBrokerAdminService {
  // common
  rpc SetClusterConfig(SetClusterConfigRequest) returns (SetClusterConfigReply) {}
  rpc GetClusterConfig(GetClusterConfigRequest) returns (GetClusterConfigReply) {}

  // cluster
  rpc ClusterStatus(ClusterStatusRequest) returns (ClusterStatusReply) {}
  rpc ClusterOverviewMetrics(ClusterOverviewMetricsRequest) returns (ClusterOverviewMetricsReply) {}

  // user
  rpc CreateUser(CreateUserRequest) returns (CreateUserReply) {}
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserReply) {}
  rpc ListUser(ListUserRequest) returns (ListUserReply) {}

  // client
  rpc ListClient(ListClientRequest) returns (ListClientReply) {}

  // session
  rpc ListSession(ListSessionRequest) returns (ListSessionReply) {}

  // acl
  rpc ListAcl(ListAclRequest) returns (ListAclReply) {}
  rpc CreateAcl(CreateAclRequest) returns (CreateAclReply) {}
  rpc DeleteAcl(DeleteAclRequest) returns (DeleteAclReply) {}

  // blacklist
  rpc ListBlacklist(ListBlacklistRequest) returns (ListBlacklistReply) {}
  rpc DeleteBlacklist(DeleteBlacklistRequest) returns (DeleteBlacklistReply) {}
  rpc CreateBlacklist(CreateBlacklistRequest) returns (CreateBlacklistReply) {}

  // flapping detect
  rpc EnableFlappingDetect(EnableFlappingDetectRequest) returns (EnableFlappingDetectReply) {}
  rpc ListFlappingDetect(ListFlappingDetectRequest) returns (ListFlappingDetectReply) {}

  // system alarm
  rpc SetSystemAlarmConfig(SetSystemAlarmConfigRequest) returns (SetSystemAlarmConfigReply) {}
  rpc ListSystemAlarm(ListSystemAlarmRequest) returns (ListSystemAlarmReply) {}

  // connection
  rpc ListConnection(ListConnectionRequest) returns (ListConnectionReply) {}

  // observability: slow-sub
  rpc ListSlowSubscribe(ListSlowSubscribeRequest) returns (ListSlowSubscribeReply) {}
  rpc ListTopic(ListTopicRequest) returns (ListTopicReply) {}

  // topic rewrite rule
  rpc DeleteTopicRewriteRule(DeleteTopicRewriteRuleRequest) returns (DeleteTopicRewriteRuleReply) {}
  rpc CreateTopicRewriteRule(CreateTopicRewriteRuleRequest) returns (CreateTopicRewriteRuleReply) {}
  rpc GetAllTopicRewriteRule(ListRewriteTopicRuleRequest) returns (ListRewriteTopicRuleReply)  {}

  // connector
  rpc ListConnector(ListConnectorRequest) returns (ListConnectorReply) {}
  rpc CreateConnector(CreateConnectorRequest) returns (CreateConnectorReply) {}
  rpc DeleteConnector(DeleteConnectorRequest) returns (DeleteConnectorReply) {}
  rpc UpdateConnector(UpdateConnectorRequest) returns (UpdateConnectorReply) {}

  // schema
  rpc ListSchema(ListSchemaRequest) returns (ListSchemaReply) {}
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaReply) {}
  rpc UpdateSchema(UpdateSchemaRequest) returns (UpdateSchemaReply) {}
  rpc DeleteSchema(DeleteSchemaRequest) returns (DeleteSchemaReply) {}
  rpc ListBindSchema(ListBindSchemaRequest) returns (ListBindSchemaReply) {}
  rpc BindSchema(BindSchemaRequest) returns (BindSchemaReply) {}
  rpc UnbindSchema(UnbindSchemaRequest) returns (UnbindSchemaReply) {}

  // auto subscribe
  rpc SetAutoSubscribeRule(SetAutoSubscribeRuleRequest) returns (SetAutoSubscribeRuleReply) {}
  rpc DeleteAutoSubscribeRule(DeleteAutoSubscribeRuleRequest) returns (DeleteAutoSubscribeRuleReply) {}
  rpc ListAutoSubscribeRule(ListAutoSubscribeRuleRequest) returns (ListAutoSubscribeRuleReply) {}

  // subscribe
  rpc ListSubscribe(ListSubscribeRequest) returns (ListSubscribeReply) {}
  rpc GetSubscribeDetail(SubscribeDetailRequest) returns (SubscribeDetailReply) {}
}

// --------- common -----------

// Common Pagination Parameters (Optional)
message Pagination {
  uint32 limit = 1;
  uint32 offset = 2;
}

// Common Filter Parameters (Optional)
message Filter {
  string field = 1;
  repeated string values = 2;
  optional MatchMode exact_match = 3;
}

enum MatchMode {
  // ExactMatch
  EXACT = 0;
  // FuzzyMatch
  FUZZY = 1;
}

// Common Sorting Parameters (Optional)
message Sorting {
  // The field to sort by
  string order_by = 1;
  // The sorting direction
  OrderDirection direction = 2;
}

enum OrderDirection {
  ASC = 0;
  DESC = 1;
}

// Optional Query Parameters
// Completely optional, not passing (such as CLI query) returns all
message QueryOptions {
  optional Pagination pagination = 1;
  // When there are no filter conditions, return an empty list
  repeated Filter filters = 2;
  optional Sorting sorting = 3;
}

// --------- cluster --------
message SetClusterConfigRequest {
  string feature_name = 1;
  bool is_enable = 2;
}
message SetClusterConfigReply {
  string feature_name = 1;
  bool is_enable = 2;
}

message GetClusterConfigRequest {}
message GetClusterConfigReply {
  bytes mqtt_broker_cluster_dynamic_config = 1;
}

message ClusterStatusRequest {}

message ClusterStatusReply {
  string cluster_name = 1;
  uint32 message_in_rate = 2;
  uint32 message_out_rate = 3;
  uint32 connection_num = 4;
  uint32 session_num = 5;
  uint32 topic_num = 6;
  repeated BrokerNodeRaw nodes = 7;
  string placement_status = 8;
  uint32 tcp_connection_num = 9;
  uint32 tls_connection_num = 10;
  uint32 websocket_connection_num = 11;
  uint32 quic_connection_num = 12;
  uint32 subscribe_num = 13;
  uint32 exclusive_subscribe_num = 14;
  uint32 share_subscribe_leader_num = 15;
  uint32 share_subscribe_resub_num = 16;
  uint32 exclusive_subscribe_thread_num = 17;
  uint32 share_subscribe_leader_thread_num = 18;
  uint32 share_subscribe_follower_thread_num = 19;
}

message BrokerNodeRaw {
  string cluster_name = 1;
  string cluster_type = 2;
  string extend_info = 3;
  uint64 node_id = 4;
  string node_ip = 5;
  string node_inner_addr = 6;
  string start_time = 7;
  string register_time = 8;
}

message ClusterOverviewMetricsRequest{
  uint64 start_time = 1;
  uint64 end_time = 2;
}

message ClusterOverviewMetricsReply {
  string connection_num = 1;
  string topic_num = 2;
  string subscribe_num = 3;
  string message_in_num = 4;
  string message_out_num = 5;
  string message_drop_num = 6;
}

// ---------- client --------
message ListClientRequest {
  optional QueryOptions options = 1;
}
message ListClientReply {
  repeated ClientRaw clients = 1;
  uint32 total_count = 2;
}
message ClientRaw {
  // Basic Info
  string client_id = 1;
  string username = 2;

  // Connection Status
  bool is_online = 3;
  string source_ip = 4;
  // timestamp
  uint64 connected_at = 5;
  uint32 keep_alive = 6;

  // Session Info
  bool clean_session = 7;
  uint64 session_expiry_interval = 8;
}

// ----------- session --------
message ListSessionRequest {
  optional QueryOptions options = 1;
}
message ListSessionReply {
  repeated SessionRaw sessions = 1;
  uint32 total_count = 2;
}
message SessionRaw {
  string client_id = 1;
  uint64 session_expiry = 2;
  bool is_contain_last_will = 3;
  optional uint64 last_will_delay_interval = 4;
  uint64 create_time = 5;

  optional uint64 connection_id = 6;
  optional uint64 broker_id = 7;
  optional uint64 reconnect_time = 8;
  optional uint64 distinct_time = 9;
}

// --------- user --------
message ListUserRequest {
  optional QueryOptions options = 1;
}

message ListUserReply {
  repeated UserRaw users = 1;
  uint32 total_count = 2;
}

message UserRaw {
  string username = 1;
  bool is_superuser = 3;
}

message CreateUserRequest {
  string username = 1;
  string password = 2;
  bool is_superuser = 3;
}

message CreateUserReply {}

message DeleteUserRequest {
  string username = 1;
}

message DeleteUserReply {}

// --------- acl --------
message ListAclRequest {
  string cluster_name = 1;
  optional QueryOptions options = 2;
}

message ListAclReply {
  repeated bytes acls = 1;
  uint32 total_count = 2;
}

message DeleteAclRequest {
  string cluster_name = 1;
  bytes acl = 2;
}

message DeleteAclReply {}

message CreateAclRequest {
  string cluster_name = 1;
  bytes acl = 2;
}

message CreateAclReply {}

// --------- blacklist --------
message ListBlacklistRequest {
  string cluster_name = 1;
  optional QueryOptions options = 2;
}

message ListBlacklistReply {
  repeated BlacklistRaw blacklists = 1;
  uint32 total_count = 2;
}

message BlacklistRaw {
  BlacklistType blacklist_type = 1;
  string resource_name = 2;
  uint64 end_time = 3;
  string desc = 4;
}

enum BlacklistType {
  CLIENT_ID = 0;
  USERNAME = 1;
  IP_ADDRESS = 2;
  CLIENT_ID_MATCH = 3;
  USERNAME_MATCH = 4;
  IP_CIDR = 5;
}

message CreateBlacklistRequest {
  string cluster_name = 1;
  bytes blacklist = 2;
}

message CreateBlacklistReply {}

message DeleteBlacklistRequest {
  string cluster_name = 1;
  string blacklist_type = 2;
  string resource_name = 3;
}

message DeleteBlacklistReply {}

// --------- connection --------
message ListConnectionRequest {}

message ListConnectionReply {
  repeated ListConnectionRaw list_connection_raw = 1;
}

message ListConnectionRaw {
  uint64 connection_id = 1;
  string connection_type = 2;
  string protocol = 3;
  string source_addr = 4;
  string info = 5;
}

// flapping detect
message EnableFlappingDetectRequest {
  bool is_enable = 1;
  uint32 window_time = 2;
  uint32 max_client_connections = 3;
  uint32 ban_time = 4;
}

message EnableFlappingDetectReply {
  bool is_enable = 1;
}

message ListFlappingDetectRequest {
  optional QueryOptions options = 1;
}

message ListFlappingDetectReply {
  repeated FlappingDetectRaw flapping_detect_raw = 1;
  uint32 total_count = 2;
}

message FlappingDetectRaw {
  string client_id = 1;
  uint64 before_last_windows_connections = 2;
  uint64 first_request_time = 3;
}


// --------- observability service --------
// --------- slow subscribe feature -------
message ListSlowSubscribeRequest {
  uint64 list = 1;
  string topic = 2;
  string sub_name = 3;
  string client_id = 4;
  string sort = 5;
}

message ListSlowSubscribeReply {
  repeated ListSlowSubScribeRaw list_slow_subscribe_raw = 1;
}

message ListSlowSubScribeRaw {
  string client_id = 1;
  string topic = 2;
  uint64 time_ms = 3;
  string node_info = 4;
  uint64 create_time = 5;
  string sub_name = 6;
}

// --------- system alarm --------
message SetSystemAlarmConfigRequest {
  optional bool enable = 1;
  optional float os_cpu_high_watermark = 2;
  optional float os_cpu_low_watermark = 3;
  optional float os_memory_high_watermark = 4;
  optional uint64 os_cpu_check_interval_ms = 5;
}

message SetSystemAlarmConfigReply {
  bool enable = 1;
  optional float os_cpu_high_watermark = 2;
  optional float os_cpu_low_watermark = 3;
  optional float os_memory_high_watermark = 4;
  optional uint64 os_cpu_check_interval_ms = 5;
}

message ListSystemAlarmRequest {
}

message ListSystemAlarmReply {
  repeated ListSystemAlarmRaw list_system_alarm_raw = 1;
}

message ListSystemAlarmRaw {
  string name = 1;
  string message = 2;
  int64 activate_at = 3;
  bool activated = 4;
}

// --------- mqtt topic --------
message ListTopicRequest {
  optional string topic_name = 1;
  optional QueryOptions options = 2;
}

message ListTopicReply {
  repeated MqttTopicRaw topics = 1;
  uint32 total_count = 2;
}

message MqttTopicRaw {
  string topic_id = 1;
  string cluster_name = 2;
  string topic_name = 3;
  bool is_contain_retain_message = 4;
}

message DeleteTopicRewriteRuleRequest {
  //The action of the rewrite rule, one of the publish|subscribe|all.
  string action = 1;
  //The source topic of the rewrite rule.
  string source_topic = 2;
}

message DeleteTopicRewriteRuleReply {}

message CreateTopicRewriteRuleRequest {
  //The action of the rewrite rule, one of the publish|subscribe|all.
  string action = 1;

  //The source topic of the rewrite rule.
  string source_topic = 2;

  //The dest topic of the rewrite rule.
  string dest_topic = 3;

  //The regex of the rewrite rule.
  string regex = 4;
}

message CreateTopicRewriteRuleReply {}

message ListRewriteTopicRuleRequest {}

message ListRewriteTopicRuleReply {
  repeated MqttTopicRewriteRuleRaw rewrite_topic_rules = 1;
  uint32 total_count = 2;
}

message MqttTopicRewriteRuleRaw {
  string source_topic = 1;
  string cluster_name = 2;
  string dest_topic = 3;
  string action = 4;
  string regex = 5;
}

// --------- mqtt connector --------
message ListConnectorRequest {
  string connector_name = 1;
  optional QueryOptions options = 2;
}

message ListConnectorReply {
  repeated ConnectorRaw connectors = 1;
  uint32 total_count = 2;
}

message ConnectorRaw {
  string connector_name = 1;
  MqttStatus status = 2;
  ConnectorType connector_type = 3;
  string topic_id = 4;
  string cluster_name = 5;
  uint64 create_time = 6;
  uint64 update_time = 7; 
  string config = 8;
  optional uint64 broker_id = 9;
}

enum MqttStatus {
  idle = 0;
  running = 1;
}

enum ConnectorType {
  File = 0;
  Kafka = 1;
}

message CreateConnectorRequest {
  string connector_name = 1;
  ConnectorType connector_type = 2;
  string config = 3;
  string topic_id = 4;
}

message CreateConnectorReply {}

message DeleteConnectorRequest {
  string connector_name = 1;
}

message DeleteConnectorReply {}

message UpdateConnectorRequest {
  bytes connector = 1;
}

message UpdateConnectorReply {}

// --------- mqtt schema --------
message ListSchemaRequest {
  string schema_name = 1;
}

message ListSchemaReply {
  repeated bytes schemas = 1;
}

message CreateSchemaRequest {
  string schema_name = 1;
  string schema_type = 2;
  string schema = 3;
  string desc = 4;
}

message CreateSchemaReply {}

message UpdateSchemaRequest {
  string schema_name = 1;
  string schema_type = 2;
  string schema = 3;
  string desc = 4;
}

message UpdateSchemaReply {}

message DeleteSchemaRequest {
  string schema_name = 1;
}

message DeleteSchemaReply {}

message ListBindSchemaRequest {
  string schema_name = 1;
  string resource_name = 2;
}

message ListBindSchemaReply {
  repeated bytes schema_binds = 1;
}

message BindSchemaRequest {
  string schema_name = 1;
  string resource_name = 2;
}

message BindSchemaReply {}

message UnbindSchemaRequest {
  string schema_name = 1;
  string resource_name = 2;
}

message UnbindSchemaReply {}

// --------- auto subscribe --------
message ListAutoSubscribeRuleRequest {}

message ListAutoSubscribeRuleReply {
  repeated bytes auto_subscribe_rules = 1;
}

message SetAutoSubscribeRuleRequest {
  //The topic of the auto subscribe rule.
  string topic = 1;

  //The qos of the auto subscribe rule.
  uint32 qos = 2;

  //The no local of the auto subscribe rule.
  bool no_local = 3;

  //The retain sa published of the auto subscribe rule.
  bool retain_as_published = 4;

  //The retained handling of the auto subscribe rule.
  uint32 retained_handling = 5;
}

message SetAutoSubscribeRuleReply {}

message DeleteAutoSubscribeRuleRequest {
  //The topic of the auto subscribe rule.
  string topic = 1;
}

message DeleteAutoSubscribeRuleReply {}

// --------- subscribe  --------
message ListSubscribeRequest {
  optional QueryOptions options = 1;
}

message ListSubscribeReply {
  repeated MqttSubscribeRaw subscriptions = 1;
  uint32 total_count = 2;
}

message MqttSubscribeRaw {
  string client_id = 1;
  string path = 2;
  uint64 broker_id = 3;
  string protocol = 4;
  string qos = 5;
  uint32 no_local = 6;
  uint32 preserve_retain = 7;
  string retain_handling = 8;
  string create_time = 9;
  uint32 pk_id = 10;
  string properties = 11;
  bool is_share_sub = 12;
}

message SubscribeDetailRequest{
  string client_id = 1;
  string path = 2;
}

message SubscribeDetailReply{
  string sub_info = 1;
  repeated SubscribeDetailRaw details = 2;
}

message SubscribeDetailRaw{
  string sub = 1;
  string thread = 2;
}
